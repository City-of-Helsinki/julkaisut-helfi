<?php

/**
 * @file
 * Add your custom theme override functions here.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Render\Markup;
use Drupal\Core\Url;
use Drupal\media\Entity\Media;
use Drupal\menu_link_content\Plugin\Menu\MenuLinkContent;
use Drupal\node\Entity\Node;
use Drupal\responsive_image\Entity\ResponsiveImageStyle;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\ViewExecutable;

/**
 * Implements template_preprocess_node().
 */
function julkaisut_preprocess_node(&$variables) {
  /** @var \Drupal\node\Entity\Node $node */
  $node = $variables['node'];
  $variables['url_absolute'] = $node->toUrl('canonical', [
    'language' => $node->language(),
    'absolute' => true,
  ]);

  $variables['date'] = \Drupal::service('date.formatter')->format($node->getCreatedTime(), 'published_date');

  $variables['translation_links'] = [
    '#theme' => 'item_list',
    '#list_type' => 'ul',
    '#wrapper_attributes' => [
      'class' => ['translation-links'],
    ],
    '#items' => [],
  ];
  $current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  foreach ($node->getTranslationLanguages() as $langcode => $language) {
    if ($langcode === $current_language) {
      continue;
    }
    /** @var Drupal\node\Entity\Node $translation */
    $translation = $node->getTranslation($langcode);
    // Cannot change the name of English language
    // @see https://www.drupal.org/project/drupal/issues/2797961
    $label = ['en' => 'In English'];
    $variables['translation_links']['#items'][] = [
      '#type' => 'link',
      '#title' => Markup::create($label[$langcode] ?? $language->getName()),
      '#url' => $translation->toUrl('canonical', [
        'language' => $translation->language(),
      ]),
    ];
  }

  switch ($node->getType()) {
    case 'article':
      $variables['type_label'] = t('Article');
      /** @var Drupal\taxonomy\Entity\Term $term */
      $term = $node->field_magazine->entity;
      /** @var Drupal\taxonomy\TermStorage $storage */
      $storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
      // Use the upper most parent as the label if one exists.
      foreach ($storage->loadParents($term->id()) as $parent) {
        if ($parent->parent->value === NULL) {
          $variables['type_label'] = $parent->getName();
          break;
        }
      }

      break;
    case 'book':
      $variables['type_label'] = t('Report');
      break;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function julkaisut_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  /** @var Drupal\node\Entity\Node|null $node */
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    // Add a separate template per depth so we can target the book outline.
    if ($node instanceof Node && $node->bundle() === 'book') {
      $suggestions[] = 'node__book__depth_' . $node->book['depth'];
    }
  }

  // Set a higher priority for node--teaser and node--search-result suggestions
  foreach ([
    'node__teaser',
    'node__article__teaser',
    'node__book__teaser',
    'node__search_result',
    'node__article__search_result',
    'node__book__search_result',
  ] as $suggestion) {
    if (in_array($suggestion, $suggestions)) {
      $suggestions[] = $suggestion;
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function julkaisut_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  /** @var Drupal\taxonomy\Entity\Term|null $term */
  $term = $variables['elements']['#taxonomy_term'];
  $view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  // Add a separate template per depth so we can target the parents.
  if ($term->parent->target_id) {
    $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__depth_2';
  } else {
    $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__depth_1';
  }

  // Add view mode theme suggestions.
  $suggestions[] = 'taxonomy_term__' . $view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->id() . '__' . $view_mode;
}

/**
 * Implements template_preprocess_book_navigation().
 */
function julkaisut_preprocess_book_navigation(&$variables) {
  // Do not show the parent URL
  unset($variables['parent_url']);

  // On the root page, do not show the navigation, only the tree.
  $is_root = $variables['book_link']['depth'] === '1';
  if ($is_root) {
    $variables['has_links'] = false;
  } else {
    $variables['tree'] = null;
  }
}

/**
 * Implements template_preprocess_field().
 *
 * Add an `is-root-container` to gutenberg fields.
 */
function julkaisut_preprocess_field(&$variables) {
  switch ($variables['field_name']) {
    // If the node with the field has a `field_featured_image_caption` inject it as the
    // media elements caption for easier admin UX when translating.
    case 'field_image':
      $node = $variables['element']['#object'];
      if ($node instanceof Node) {
        /** @var Drupal\node\Entity\Node $node */
        $current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
        if ($node->hasTranslation($current_language)) {
          $node = $node->getTranslation($current_language);
        }
        /** @var Drupal\media\Entity\Media $node */
        $media = $variables['element'][0]['#media'];
        if ($node->hasField('field_featured_image_caption')) {
          if ($caption = $node->field_featured_image_caption->value) {
            $media->field_caption = $caption;
          }
        }
      }
      break;
    case 'body':
    case 'description':
      if (!$variables['multiple']) {
        $variables['attributes']['class'][] = 'is-root-container';
      }

      foreach ($variables['items'] as &$item) {
        if ($item['content']['#format'] === 'gutenberg') {
          $item['attributes']->addClass('is-root-container');
        }
      }
      break;
  }
}

/**
 * Implements hook_preprocess_image().
 */
function julkaisut_preprocess_image(&$variables) {
  $variables['attributes']['loading'] = 'lazy';
}

/**
 * Implements hook_preprocess_responsive_image().
 *
 * Add width/height attributes
 */
function julkaisut_preprocess_responsive_image(&$variables) {
  if ($variables['responsive_image_style_id'] ?? false) {
    $storage = \Drupal::entityTypeManager()->getStorage('responsive_image_style');
    /** @var Drupal\responsive_image\Entity\ResponsiveImageStyle $style */
    $style = $storage->load($variables['responsive_image_style_id']);

    $dimensions = responsive_image_get_image_dimensions(
      $style->getFallbackImageStyle(),
      ['width' => $variables['width'], 'height' => $variables['height']],
      $variables['uri']
    );

    if ($dimensions['width'] ?? false) {
      $variables['img_element']['#attributes']['width'] = $dimensions['width'];
      $variables['img_element']['#attributes']['height'] = $dimensions['height'];
    }
  }
}

/**
 * Implements template_preprocess_views_view_unformatted().
 */
function julkaisut_preprocess_views_view_unformatted(&$variables) {
  /** @var Drupal\views\ViewExecutable $view */;
  $view = $variables['view'];
  if ($view->id() === 'search') {
    $builder = \Drupal::entityTypeManager()->getViewBuilder('node');

    /** @var Drupal\node\Entity\Node[] $node */
    $groups = [];
    foreach ($variables['rows'] as $row) {
      /** @var Drupal\node\Entity\Node $node */
      $node = $row['content']['#node'];

      switch ($node->getType()) {
        case 'book':
          $parent = NULL;
          $parent_id = $node->book['pid'];

          while($parent_id) {
            $parent = Node::load($parent_id);
            $parent_id = $parent->book['pid'];
          }

          if ($parent) {
            $group_id = 'nid:' . $parent->id();

            if (!isset($groups[$group_id])) {
              $groups[$group_id] = [
                'parent' => ['content' => $builder->view($parent, 'search_result')],
                'attributes' => [],
              ];
            }

            $groups[$group_id]['parent']['content']['#children'][] = $row;
          }
          else {
            $group_id = 'nid:' . $node->id();
            $groups[$group_id] = [
              'parent' => $row,
            ];
          }

          break;
        case 'article':
          // $parent = $node->field_magazine->entity;
          $group_id = 'nid:' . $node->id();
          $groups[$group_id] = [
            'parent' => $row,
          ];

          break;
      }
    }

    $variables['groups'] = $groups;
  }
}

/**
 * Implements template_preprocess_menu().
 */
function julkaisut_preprocess_menu(&$variables) {
  $current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();

  foreach ($variables['items'] as $idx => $item) {
    if (!($item['original_link'] instanceof MenuLinkContent)) {
      continue;
    }
    /** @var Drupal\Core\Url $url */
    $url = $item['url'];

    if (!$url->isRouted()) {
      continue;
    }

    switch ($url->getRouteName()) {
      case 'entity.taxonomy_term.canonical':
        $term = Term::load($url->getRouteParameters()['taxonomy_term']);
        if (!$term->hasTranslation($current_language)) {
          unset($variables['items'][$idx]);
        }
        break;
    }
  }
}

/**
 * Implements template_preprocess_menu__social_media().
 */
function julkaisut_preprocess_menu__social_media(&$variables) {
  foreach ($variables['items'] as &$item) {
    $item['title'] = Markup::create(sprintf(
      '<i class="hds-icon hds-icon--size-s %s" role="presentation"></i>',
      $item['title']
    ));

    $item['url']->setOption('attributes', array_merge(
      $item['url']->getOption('attributes'),
      ['target' => '_blank']
    ));
  }
}

/**
 * Implements template_preprocess_book_tree().
 */
function julkaisut_preprocess_book_tree(&$variables) {
  $variables['is_expanded'] = FALSE;
  if ($node = \Drupal::request()->get('node')) {
    $variables['is_expanded'] = $node->book['depth'] === '1';
  }

  // Gather all book ids.
  $nids = [];
  $walker = function ($item, $nid) use (&$nids, &$walker) {
    $nids[] = $nid;
    array_walk($item['below'], $walker);
  };
  array_walk($variables['items'], $walker);

  // Retrieve all nids that do not have body field conntent.
  $current_language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $empty_nids = \Drupal::entityQuery('node')
    ->condition('nid', $nids, 'IN')
    ->condition('langcode', $current_language)
    ->notExists('body', $current_language)
    ->execute();

  $translated_nids = \Drupal::entityQuery('node')
    ->condition('nid', $nids, 'IN')
    ->condition('langcode', $current_language)
    ->execute();

  $is_translated = function ($nid) use ($translated_nids) {
    return in_array($nid, $translated_nids);
  };

  $mutation_walker = function (&$item, $nid) use ($empty_nids, $is_translated, &$mutation_walker) {
    // Remove links to books without contennt
    if (in_array($nid, $empty_nids)) {
      unset($item['url']);
    }

    // Filter out untranslated items
    $item['below'] = array_filter($item['below'], $is_translated, ARRAY_FILTER_USE_KEY);
    // Recurse
    array_walk($item['below'], $mutation_walker);
  };

  // Filter out untranslated items
  $variables['items'] = array_filter($variables['items'], $is_translated, ARRAY_FILTER_USE_KEY);
  // Remove links to book pages without content
  array_walk($variables['items'], $mutation_walker);
}

/**
 * Implements template_preprocess_media__document__download().
 */
function julkaisut_preprocess_media__document__download(&$variables) {
  /** @var \Drupal\media\Entity\Media $entity */
  $media = $variables['elements']['#media'] ?? null;
  if ($media) {
    /** @var Drupal\file\Entity\File $entity */
    $file = $media->field_media_file->entity;
    $variables['file_url'] = file_create_url($file->uri->value);
  }
}

/**
 * Implements template_preprocess_page().
 */
function julkaisut_preprocess_page(&$variables) {
  $variables['site_name'] = Drupal::config('system.site')->get('name');
  $langcode = Drupal::service('language_manager')->getCurrentLanguage()->getId();
  $logo_filename = ($langcode === 'sv') ? 'helsinki-sv.svg' : 'helsinki-fi.svg';

  // Attach the logo
  $variables['logo'] = [
    '#theme' => 'image',
    '#uri' => file_create_url($variables['directory'] . "/dist/images/logo/$logo_filename"),
    '#attributes' => [
      'alt' => strip_tags($variables['site_name']),
      'title' => strip_tags($variables['site_name']),
      'style' => 'max-width: 200px;',
      'class' => ['logo'],
    ],
  ];

  /** @var Drupal\node\Entity\Node|null $node */
  $node = $variables['node'] ?? null;

  // Allow nodes to change the content width to 12/12
  if ($node instanceof Node && $node->field_wide_contentwidth && $node->field_wide_contentwidth->getString() === '1') {
    $variables['attributes']['style'] = '--content-width: var(--alignwide-width)';
  }

  $links = \Drupal::service('language_manager')->getLanguageSwitchLinks(LanguageInterface::TYPE_INTERFACE, Url::fromRoute(
    \Drupal::service('path.matcher')->isFrontPage() ? '<front>' : '<current>',
  ));

  $variables['mobile_language_menu'] = [
    '#theme' => 'links',
    '#links' => $links->links,
    '#set_active_class' => TRUE,
    '#attributes' => [
      'role' => 'menu',
      'class' => ['site-mobile-languages__menu'],
    ]
  ];
}

/**
 * Implements template_preprocess_taxonomy_term().
 */
function julkaisut_preprocess_taxonomy_term(&$variables) {
  $term = $variables['term'];

  // Expose a `date` variable much like on nodes
  if ($term->field_published && !$term->field_published->isEmpty()) {
    $variables['date'] = \Drupal::service('date.formatter')->format(
      strtotime($term->field_published->value),
      'published_date'
    );
  }
}

/**
 * Implemennts template_preprocess_link__language_block();
 */
function julkaisut_preprocess_links__language_block(&$variables) {
  // Cannot change the name of English language
  // @see https://www.drupal.org/project/drupal/issues/2797961
  if ($variables['links']['en']['link']['#title'] ?? null) {
    $variables['links']['en']['link']['#title'] = 'In English';
  }

  foreach ($variables['links'] as &$link) {
    if (!empty($link['link'])) {
      $link['link']['#options']['attributes']['role'] = 'menuitem';
    } else {
      $link['attributes']
        ->setAttribute('role', 'menuitem')
        ->setAttribute('tabindex', '-1');
    }
  }

  $variables['current_language'] = \Drupal::languageManager()->getCurrentLanguage();
}

/**
 * Implements template_preprocess_block().
 */
function julkaisut_preprocess_block(&$variables) {
  switch ($variables['base_plugin_id']) {
    case 'views_block':
      /** @var Drupal\views\ViewExecutable $view */
      $view = $variables['content']['#view'];
      // Propagate the views css class to the block wrapper.
      if ($css_class = $view->display_handler->getOption('css_class')) {
        $variables['attributes']['class'][] = $css_class;
      }
      break;
    case 'language_block':
      $variables['attributes']['class'][] = 'site-languages';
      break;
    // Swap the logo based on language
    case 'system_branding_block':
      $langcode = Drupal::service('language_manager')->getCurrentLanguage()->getId();
      $logo_filename = ($langcode === 'sv') ? 'helsinki-sv.svg' : 'helsinki-fi.svg';
      $variables['site_logo'] = file_create_url($variables['directory'] . "/dist/images/logo/$logo_filename");
      break;
  }

  if (isset($variables['elements']['#id'])) {
    if ($block = Block::load($variables['elements']['#id'])) {
      switch ($block->getRegion()) {
        case 'content':
          if ($block->id() !== 'mainpagecontent') {
            $variables['attributes']['class'][] = 'is-container';
          }
          break;
      }
    }
  }
}

/**
 * Implements template_preprocess().
 */
function julkaisut_preprocess(&$variables) {
  switch ($variables['theme_hook_original']) {
    case 'form_element':
      $variables['attributes']['class'][] = 'hds-text-input';
      break;
    case 'form_element_label':
      $variables['attributes']['class'][] = 'hds-text-input__label';
      break;
    case 'input__email':
    case 'input__file':
    case 'input__number':
    case 'input__password':
    case 'input__search':
    case 'input__tel':
    case 'input__textfield':
    case 'input__url':
    case 'select':
      $variables['attributes']['class'][] = 'hds-text-input__input';
      if (isset($variables['element']['#type']) && $variables['element']['#type'] === 'search_api_autocomplete') {
        $variables['children'] = Markup::create('<i class="hds-icon hds-icon--search hds-icon--size-s" role="presentation"></i>');
      }
      break;
    case 'input__submit':
      $variables['attributes']['class'][] = 'wp-block-button wp-block-button__link';
      break;
  }
}

function julkaisut_preprocess_views_view(&$variables) {
  switch ($variables['id']) {
    case 'search':
      $variables['attributes']['class'][] = 'search-view';

      if (empty($variables['rows'])) {
        $variables['attributes']['class'][] = 'has-no-results';
      }
      break;
  }
}

/**
 * Implements template_preprocess_page_title().
 */
function julkaisut_preprocess_page_title(&$variables) {
  /** @var Drupal\node\Entity\Node|null $node */
  $node = \Drupal::routeMatch()->getParameter('node') ?? null;

  // Enable copy to clipboard on book pages.
  if ($node instanceof Node && in_array($node->getType(), ['book'])) {
    $variables['copy_to_clipboard'] = $node->toUrl('canonical', [
      'language' => $node->language(),
      'absolute' => true,
    ]);
  }
}
