@use "common/breakpoints" as *;

.search-view {
  --field-gutter: var(--spacing-s);
  height: 491px;
  position: relative;

  @include mq($from: medium) {
    --field-gutter: var(--spacing-m);
  }

  @media (max-width: 767px) {
    height: 600px;
  }

  @media (min-width: 767px) {
    justify-content: center;
  }
  max-width: var(--content-width);
  margin-inline: auto;

  // Except on taxonomy search pages, move the header below the filter form
  body:not(.path-taxonomy) & {
    display: flex;
    flex-direction: column;

    > form {
      order: -1;
    }

    > header {
      margin-top: calc(var(--spacing-l) - var(--spacing-m));

      @include mq($from: medium) {
        margin-top: var(--spacing-l);
      }

      :last-child {
        margin-bottom: 0;
      }
    }
  }

  header {
    margin-bottom: 60px;
    p {
      font-size: 22px;
    }
  }

  .result-count {
    margin-top: calc(var(--spacing-m) * -1 + var(--spacing-xs));
  }

  .facets-views-plugin > div:not(.hidden),
  .form-item {
    margin-top: 0;
    margin-bottom: var(--field-gutter);

    @at-root .search-view .views-exposed-form {
      @include mq($from: medium) {
        margin-bottom: calc(var(--field-gutter) * -1);
      }
    }

  }

  .hds-text-input__label {
    margin-bottom: var(--spacing-s);
    line-height: var(--lineheight-s);

    @include mq($from: medium) {
      font-size: var(--fontsize-heading-m);
      margin-bottom: var(--spacing-xs);
    }
  }

  .views-exposed-form {
    position: relative;
    @include mq($from: medium) {
      grid-template-areas:
        "search none none"
        "facets facets sort"
        "submit submit submit";
    }
    @media (max-width: 767px) {
      margin-top: 60px;
      margin-left: 24px;
      max-width: 300px;
    }
  }

  &.has-no-results .form-item-sort-bef-combine {
    display: none;
  }

  .form-item-search {
    grid-area: search;
    position: relative;
    width: 100%;
    max-width: 560px;

    label {
      font-size: var(--fontsize-heading-m);
      margin-bottom: var(--spacing-m);
      line-height: var(--lineheight-s);
      text-align: left;
      font: normal normal normal 64px/64px var(--font-default);
      letter-spacing: 0;
      color: #FFFFFF;
      @media (max-width: 767px) {
        font-size: 40px;
      }

      @include mq($from: medium) {
        font-size: var(--fontsize-heading-l);
      }
    }
    .form-text {
      width: 415px;
      height: 46px;
      border: none;
      border-radius: 0;
      @media (max-width: 767px) {
        width: 90%;
      }
    }
  }

  .facets {
    grid-area: facets;
    margin-bottom: var(--field-gutter);
  }

  .form-item-sort-bef-combine {
    grid-area: sort;

    position: absolute;
    bottom: 0;
    right: 0;
    transform: translate(0, 100%);
    display: flex;
    white-space: nowrap;
    align-items: center;
    justify-content: space-between;
    margin: 0;
    .hds-text-input__label {
      color: #1B1B1B;
      font-size: 16px;
      font-weight: bold;
      padding-right: 24px;
      margin: 0;
    }
    #edit-sort-bef-combine {
      padding: 0 30px 0 15px;
    }
    .form-select {
      border: 1px solid #CCCCCC;
    }
    @media (max-width: 576px) {
      left: 0;
      bottom: -60px;
    }
  }

  // Add a gutter between search filters/actions and results
  .views-row:first-child {
    margin-top: calc(var(--field-gutter) + var(--spacing-2-xs));
  }

  // Gutter between rows
  .views-row:not(:last-child) {
    margin-bottom: var(--spacing-m);
  }

  .form-actions {
    display: none;
  }

}
#main-content {
  .block-views-blocksearch-block-1 {
    max-width: 100%;
  }
}

.block-views-blocksearch-block-1 {
  &:before {
    content: "";
    position: absolute;
    width: 100%;
    height: 500px;
    top: -100px;
    background: url("../images/search/background-wave-mobile.svg") center center repeat;
    z-index: -1;
  }
  &:after {
    content: "";
    position: absolute;
    top: -30px;
    right: 0;
    width: 100%;
    height: 100%;
    background: url("../images/search/search-background-mobile.jpg") bottom center no-repeat;
    z-index: -2;
    background-size: contain;
  }
  @media (min-width: 767px) {
    &:before {
      top: 0;
      left: -15px;
      width: 85%;
      height: 100%;
      background: url("../images/search/background-wave.svg") right center no-repeat;
    }
    &:after {
      top: 0;
      right: -15px;
      width: 100%;
      height: 100%;
      background: url("../images/search/search-background.jpg") right center no-repeat;
    }
  }
  @media (min-width: 1248px) {
    &:before {
      top: 0;
      left: -15px;
      width: 70%;
      height: 100%;
      background: url("../images/search/background-wave.svg") right center no-repeat;
      background-size: cover;
    }
    &:after {
      top: 0;
      right: -15px;
      width: 70%;
      height: 100%;
      background: url("../images/search/search-background.jpg") right center no-repeat;
      background-size: cover;
    }
  }

}

.facets__fields {
  display: grid;

  // Shrink on desktop
  @include mq($from: medium) {
    display: inline-grid;
  }

  grid-gap: var(--spacing-s);
  grid-template-areas: "from separator to";
  grid-template-columns: 1fr auto 1fr;
  align-items: center;

  &::after {
    display: block;
    content: 'â€“';
    grid-area: separator;
    font-size: 30px;
  }

  > :first-child {
    grid-area: from;
  }

  > :last-child {
    grid-area: to;
  }

  .form-item {
    margin-bottom: 0;
  }

  .form-select {
    /* removes the input shadow on iOS */
    -webkit-appearance: none;
    background-color: var(--input-background-default);
    border: var(--border-width) solid var(--input-border-color-default);
    border-radius: var(--border-radius);
    box-sizing: border-box;
    color: var(--input-color-default);
    font-size: var(--fontsize-body-m);
    height: var(--input-height);
    line-height: 1;
    padding: 0 calc(var(--spacing-s) + var(--spacing-l)) 0 var(--spacing-s);
    width: 100%;
    z-index: 1; // bugfix

    &:hover {
      border-color: var(--input-border-color-hover);
    }

    &:focus {
      border-color: var(--input-border-color-focus);
      outline: none;
    }

    &:not([readonly]):focus {
      box-shadow: 0 0 0 var(--outline-width) var(--focus-outline-color);
      transform: translate3d(0, 0, 0);
    }
  }
}
